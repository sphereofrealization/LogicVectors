Creating a robust parser for logic formulas and translating them into a vector space is a complex task that would typically require a domain-specific language (DSL) for logic representation, a symbolic computation library, and expertise in logical formalisms. A full implementation could span thousands of lines of code and involve significant design decisions depending on the use case.

However, for the sake of illustration, I'll outline a simplified version that uses the SymPy library for symbolic logic representation and parsing. This implementation will capture some logical elements (quantifiers, variables, and simple logical relations) and convert them into one-hot encoded vectors.

This code is not a complete robust logic parser but serves as an illustrative starting point. Building a comprehensive parser would require much more extensive code and domain-specific considerations that go beyond the scope of this platform.

Firstly, install SymPy library if you haven't already:

```bash
pip install sympy
```

Here's a simple Python code with SymPy:

```python
from sympy import symbols, And, Or, Not, Implies, Equivalent, Exists, ForAll
from sympy.logic.boolalg import BooleanFunction
import numpy as np

# List of supported logical connectives
connectives = ('And', 'Or', 'Not', 'Implies', 'Equivalent')
# Dummy list of predicates for demonstration. Normally, you'd have domain-specific predicates.
predicates = ('P', 'Q', 'R', 'S', 'T', 'U')

def logic_to_vector(formula_str, variable_symbol='x'):
    # Define the symbols used for the logical variables
    x = symbols(variable_symbol)
    # Dictionary to hold the vector encoding for each connective and predicate
    encoding = {con: idx for idx, con in enumerate(connectives + predicates)}
    
    # Parse the formula using symbolic logic from sympy. This will create an abstract syntax tree (AST)
    formula = eval(formula_str)
    
    # Initialize the vector representation with zeros
    vector_representation = np.zeros(len(encoding))

    # Helper function to increment vector index based on logic connective or predicate
    def increment_vector(element, vector):
        if isinstance(element, BooleanFunction):
            vector[encoding[element.__class__.__name__]] += 1
        return vector
    
    # Recursive function to traverse the AST and encode formula
    def encode_formula(node):
        increment_vector(node, vector_representation)
        if isinstance(node, BooleanFunction):
            for arg in node.args:
                encode_formula(arg)
                
    # Encode the main formula
    encode_formula(formula)
    
    # One-hot encoding for quantifiers, if they are present in formula string
    if 'ForAll' in formula_str:
        vector_representation = np.append(vector_representation, [1, 0])
    elif 'Exists' in formula_str:
        vector_representation = np.append(vector_representation, [0, 1])
    else:
        vector_representation = np.append(vector_representation, [0, 0])
    
    return vector_representation

# Example usage:
formula_str = "ForAll(x, Implies(P(x), Q(x)))"  # The formula: ∀x (P(x) → Q(x))
vector_representation = logic_to_vector(formula_str)
print("Vector representation:", vector_representation)
```

This code provides a simple one-hot vector encoding for the presence of basic logical connectives and predicates in a given formula string. The encoding vector length depends on the number of supported connectives and predicates. The `ForAll` and `Exists` quantifiers are encoded separately at the end of the vector space.

For a robust and complex parser that can handle a complete logical language with nesting and semantic interpretation, one could turn to libraries like the Natural Language Toolkit (nltk) in combination with a manual parsing strategy, or dedicated logic programming languages like Prolog or mathematical solvers like Z3, which is beyond the scope of this response.
